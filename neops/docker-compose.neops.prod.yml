services:
  redis:
    image: redis:7
    networks:
      - private
    restart: "on-failure"

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "neops"
      POSTGRES_DB: "neops"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - ./data/neops_postgres:/var/lib/postgresql/data
    networks:
      - private
    restart: "on-failure"

  neops_init:
    image: quay.io/zebbra/neops-core:${NEOPS_IMAGE_TAG:-1}
    depends_on:
      - elasticsearch
      - postgres
    entrypoint: [ "/app/init.sh" ]
    environment:
      DEBUG: "False"
      DATABASE_URL: "postgres://neops:${POSTGRES_PASSWORD}@postgres:5432/neops"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DJANGO_ALLOWED_HOSTS: "${DOMAIN}"
      REDIS_URL: "redis://redis:6379"
      CORS_ORIGIN_ALLOW_ALL: "${CORS_ORIGIN_ALLOW_ALL}"
      # ASGI_THREADS: "${ASGI_THREADS}"
      NEOPS_PLUGINS: "${NEOPS_PLUGINS}"
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      ELASTICSEARCH_DSL_INDEX_FIELDS_LIMIT: "100000"
      SENTRY_DSN: "${SENTRY_DSN}"
      SENTRY_ENVIRONMENT: "${SENTRY_ENVIRONMENT}"
      EMAIL_URL: "${EMAIL_URL}"
      IMPORT_DEVICE_DEFAULT_PLATFORM: "${IMPORT_DEVICE_DEFAULT_PLATFORM}"
      IMPORT_DEVICE_DEFAULT_USERNAME: "${IMPORT_DEVICE_DEFAULT_USERNAME}"
      IMPORT_DEVICE_DEFAULT_PASSWORD: "${IMPORT_DEVICE_DEFAULT_PASSWORD}"
      DJANGO_ALLOW_ASYNC_UNSAFE: "True"
    networks:
      - private

  web-client:
    image: quay.io/zebbra/neops-web-client:${NEOPS_WEBCLIENT_IMAGE_TAG:-0.1}
    environment:
      FRONTEND_GRAPHQL_ENDPOINT: ${NEOPS_API_URL}
      # FRONTEND_DEVMODE: "true"
    restart: "on-failure"

  frontend:
    image: quay.io/zebbra/neops-legacy-frontend:${NEOPS_LEGACY_FRONTEND_IMAGE_TAG:-1}
    environment:
      FRONTEND_NEOPS_URL: ${NEOPS_API_URL}
    restart: "on-failure"

  backend:
    image: quay.io/zebbra/neops-core:${NEOPS_IMAGE_TAG:-1}
    depends_on:
      - redis
      - postgres
      - elasticsearch
      - neops_init
    environment:
      DEBUG: "False"
      DATABASE_URL: "postgres://neops:${POSTGRES_PASSWORD}@postgres:5432/neops"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DJANGO_ALLOWED_HOSTS: "${DOMAIN}"
      REDIS_URL: "redis://redis:6379"
      CORS_ORIGIN_ALLOW_ALL: "${CORS_ORIGIN_ALLOW_ALL}"
      # ASGI_THREADS: "${ASGI_THREADS}"
      NEOPS_PLUGINS: "${NEOPS_PLUGINS}"
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      ELASTICSEARCH_DSL_INDEX_FIELDS_LIMIT: "100000"
      SENTRY_DSN: "${SENTRY_DSN}"
      SENTRY_ENVIRONMENT: "${SENTRY_ENVIRONMENT}"
      EMAIL_URL: "${EMAIL_URL}"
      IMPORT_DEVICE_DEFAULT_PLATFORM: "${IMPORT_DEVICE_DEFAULT_PLATFORM}"
      IMPORT_DEVICE_DEFAULT_USERNAME: "${IMPORT_DEVICE_DEFAULT_USERNAME}"
      IMPORT_DEVICE_DEFAULT_PASSWORD: "${IMPORT_DEVICE_DEFAULT_PASSWORD}"
      DJANGO_ALLOW_ASYNC_UNSAFE: "True"
    networks:
      - private
    volumes:
      - ./data/neops_backend/tmp:/tmp/
    restart: "on-failure"

  worker:
    image: quay.io/zebbra/neops-core:${NEOPS_IMAGE_TAG:-1}
    # entrypoint: ["sh", "-c", "sleep infinity"]
    # pipenv run celery -A neopsapp worker -n w1 -l INFO --concurrency=1
    command:
      [
        "/usr/local/bin/celery",
        "-A",
        "neopsapp",
        "worker",
        "-l",
        "INFO",
        "--concurrency=1",
        "--prefetch-multiplier",
        "1",
        "-O",
        "fair",
        "--without-heartbeat"
      ]
    depends_on:
      - redis
      - postgres
      - elasticsearch
      - neops_init
    networks:
      - private
    environment:
      DEBUG: "False"
      DATABASE_URL: "postgres://neops:${POSTGRES_PASSWORD}@postgres:5432/neops"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DJANGO_ALLOWED_HOSTS: "${DOMAIN}"
      REDIS_URL: "redis://redis:6379"
      NEOPS_PLUGINS: "${NEOPS_PLUGINS}"
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      ELASTICSEARCH_DSL_INDEX_FIELDS_LIMIT: "100000"
      ELASTICSEARCH_DSL_SIGNAL_PROCESSOR: "${ELASTICSEARCH_DSL_SIGNAL_PROCESSOR}"
      NORNIR_CLOSE_CONNECTION: "${NORNIR_CLOSE_CONNECTION}"
      NORNIR_CONNECTION_DELAY_FACTOR: "${NORNIR_CONNECTION_DELAY_FACTOR}"
      NORNIR_THREADS: "${NORNIR_THREADS}"
      SENTRY_DSN: "${SENTRY_DSN}"
      SENTRY_ENVIRONMENT: "${SENTRY_ENVIRONMENT}"
      EMAIL_URL: "${EMAIL_URL}"
      IMPORT_DEVICE_DEFAULT_PLATFORM: "${IMPORT_DEVICE_DEFAULT_PLATFORM}"
      IMPORT_DEVICE_DEFAULT_USERNAME: "${IMPORT_DEVICE_DEFAULT_USERNAME}"
      IMPORT_DEVICE_DEFAULT_PASSWORD: "${IMPORT_DEVICE_DEFAULT_PASSWORD}"
      NEOPS_ELASTIC_CONVERT_FACTS: "${NEOPS_ELASTIC_CONVERT_FACTS}"
      DJANGO_ALLOW_ASYNC_UNSAFE: "True"
    restart: "on-failure"

  beat:
    image: quay.io/zebbra/neops-core:${NEOPS_IMAGE_TAG:-1}
    # pipenv run celery -A neopsapp beat -l info --scheduler neops.enterprise.celery.cron.scheduler:NeopsCeleryScheduler
    command:
      [
        "/usr/local/bin/celery",
        "-A",
        "neopsapp",
        "beat",
        "--scheduler",
        "neops.enterprise.celery.cron.scheduler:NeopsCeleryScheduler",
        "-l",
        "INFO"
      ]
    depends_on:
      - redis
      - postgres
      - elasticsearch
      - neops_init
    networks:
      - private
    environment:
      DEBUG: "False"
      DATABASE_URL: "postgres://neops:${POSTGRES_PASSWORD}@postgres:5432/neops"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DJANGO_ALLOWED_HOSTS: "${DOMAIN}"
      REDIS_URL: "redis://redis:6379"
      NEOPS_PLUGINS: "${NEOPS_PLUGINS}"
      SENTRY_DSN: "${SENTRY_DSN}"
      SENTRY_ENVIRONMENT: "${SENTRY_ENVIRONMENT}"
      DJANGO_ALLOW_ASYNC_UNSAFE: "True"
    restart: "on-failure"

  flower:
    image: mher/flower
    entrypoint: [ "/bin/true" ]
    depends_on:
      - redis
      - postgres
    networks:
      - private

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.2
    environment:
      - bootstrap.memory_lock=true
      # - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - discovery.type=single-node
      - cluster.routing.allocation.disk.threshold_enabled=false
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    networks:
      - private
    restart: "on-failure"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.2
    entrypoint: [ "/bin/true" ]
    networks:
      - private

volumes:
  elasticsearch:
    driver: local

networks:
  private:
    driver: bridge
